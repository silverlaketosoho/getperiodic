/**
* Node.js Soundcloud API
* Structure heavily influnced by twitter-js
* 
* 2011 Logan Aube
*
*/
 
var url = require("url"),
http = require('http'),
OAuth = require('oauth').OAuth,
querystring = require("querystring");
 
module.exports = function(api_key, api_secret, redirect, sandbox,client_token,client_secret) {
  var domain = sandbox ? 'sandbox-soundcloud' : 'soundcloud';
  var client = {version: '0.0.1'};
  // Private
  // if(token){
  var token = {
    oauth_token: api_key,
    oauth_token_secret: api_secret,
  }
    client.token = token;
    var oAuth = require('oauth').OAuth;
  // }
  // else{
  //   var oAuth = new OAuth(
  //     'http://api.'+domain+'.com/oauth/request_token',
  //     'http://api.'+domain+'.com/oauth/access_token',
  //     api_key,
  //     api_secret,
  //     '2.0',
  //     redirect,
  //     'HMAC-SHA1',
  //     null,
  //     {'Accept': '*/*', 'Connection': 'close', 'User-Agent': 'node-soundcloud'}
  //     )   
  // }
  var option = {
    consumer_key: client_token,
    consumer_secret: client_secret

  }
  var rest_base = 'http://api.'+domain+'.com/'
  
  var requestCallback = function (callback) {
    return function (error, data, response) {

      console.log(data)
      if(error) {
        return error;
        //callback(error, null);
      } else {
        try {
          callback(null, JSON.parse(data));
        } catch (exc) {
          callback(exc, null);
        }
      }
    }
  } 
  // if (!(this instanceof Twitter)) return new Twitter(options);

  this.options = {    
    consumer_key: (client_token)? client_token : 'http://api.'+domain+'.com/oauth/request_token',
    consumer_secret: (client_secret)? client_secret : 'http://api.'+domain+'.com/oauth/access_token',
    access_token_key: api_key,
    access_token_secret: api_secret,
    domain: (sandbox) ? 'sandbox-soundcloud' : 'soundcloud',
    client: {version: '0.0.1'},
    redirect: redirect,
    headers: {'Accept': '*/*', 'Connection': 'close', 'User-Agent': 'node-soundcloud'},
    secure: false, // force use of https for login/gatekeeper
    cookie: 'node-soundcloud',
    cookie_options: {},
    cookie_secret: null
  };
  // this.options = merge(defaults, option);

console.log(this.options)
  var oAuth = new OAuth(
    this.options.request_token_url,
    this.options.access_token_url,
    this.options.consumer_key,
    this.options.consumer_secret,
    '2.0', null, 'HMAC-SHA1', null,
    this.options.headers);
  
  function merge(defaults) {
    for(var i = 1; i < arguments.length; i++){
      for(var opt in arguments[i]){
        defaults[opt] = arguments[i][opt];
      }
    }
    return defaults;
  };
  get = function(path, params, token, callback) {
    console.log(token)
    console.log(rest_base + path + '?' + querystring.stringify(params))
    oAuth.get(rest_base + path + '?' + querystring.stringify(params), token.oauth_token, token.oauth_token_secret, requestCallback(callback));
  },
  
  post = function(path, params, token, callback) {
    oAuth.post(rest_base + path, token.oauth_token, token.oauth_token_secret, params, null, requestCallback(callback));
  };
  
  // Public
  
  client.apiCall = function(method, path, params, callback) {
    console.log("inside apical")
    // console.log(this.token)
    var token = (this.token) ? this.token :  params.token;
    // var token =  params.token;
    
    delete params.token;
    
    if(method === 'GET') {
      get(path+'.json', params, token, callback);
    } else if (method === 'POST') {
      post(path+'.json', params, token, callback);
    }
  };
  

  client.setAccessToken = function(accessToken){
    this.token = accessToken;
  };

  client.getAccessToken = function(req, res, callback) {
    
    var parsedUrl = url.parse(req.url, true);
    
    // Access token
    if(parsedUrl.query && parsedUrl.query.oauth_token && req.session.auth && req.session.auth.soundcloud_oauth_token_secret) {
      oAuth.getOAuthAccessToken(
        parsedUrl.query.oauth_token,
        req.session.auth.soundcloud_oauth_token_secret,
        parsedUrl.query.oauth_verifier,
        function (error, oauth_token, oauth_token_secret, additionalParameters) {
          if (error) {
            callback(null, null);
          } else {
            callback(null, {oauth_token: oauth_token, oauth_token_secret: oauth_token_secret});
          }
        }
        );
 
      // Request token  
    } else {
      oAuth.getOAuthRequestToken(
        function (error, oauth_token, oauth_token_secret, oauth_authorize_url, additionalParameters) {
          if (!error) {
            req.session.twitter_redirect_url = req.url;
            req.session.auth = req.session.auth || {};
            req.session.auth.soundcloud_oauth_token_secret = oauth_token_secret;
            req.session.auth.soundcloud_oauth_token = oauth_token;
            res.redirect("http://"+domain+".com/oauth/authorize?oauth_token="+oauth_token);
          } else {
	    callback(error, null);
	  }
          callback(null, null);
        }
      ); 
    }
    
  };
  
  return client;
};