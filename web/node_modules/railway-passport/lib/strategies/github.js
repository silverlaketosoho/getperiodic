var passport = require('passport');

exports.callbackConnect = function(token, tokenSecret, profile, done) {
    console.info("staring callback for github account connect auth")
    console.info(profile)
    console.info(token)
    console.info(tokenSecret)
    User.findOne({where: { 
            githubId: profile.id, 
            githubAccessToken: token }
        }, function(err, account) {
        if (err) { return done(err); }
        if (account) { return done(null, account) }

        var account = new User();
        account.githubId = profile.id;
        account.githubUsername = profile.username;
        account.githubAccessToken = token;
        return done(null, account);
    });
};

exports.init = function (conf) {
    var Strategy = require('passport-github').Strategy;
    passport.use(new Strategy({
        clientID: conf.github.apiKey,
        clientSecret: conf.github.secret,
        callbackURL: conf.baseURL + 'auth/github/callback'
    }, exports.callback));

    passport.use('github-connect', new Strategy({
        clientID: conf.github.apiKey,
        clientSecret: conf.github.secret,
        callbackURL: conf.baseURL + 'connect/github/callback'
    }, exports.callbackConnect));

    // Redirect to github for account authorization.
    app.get('/connect/github',
      passport.authorize('github-connect', { failureRedirect: '/connect/accounts' })
    );

    app.get('/connect/github/callback',
      passport.authorize('github-connect', { failureRedirect: '/connect/accounts' }),
      function(req, res) {
        var user = req.user;
        // var account = req.account;
        user.updateAttributes({
            githubId: req.account.githubId,
            githubUsername: req.account.githubUsername,
            githubAccessToken: req.account.githubAccessToken,
            // githubAccessTokenSecret: req.account.githubAccessTokenSecret,
            updatedAt: new Date()
        },function(err){
            req.flash('info', 'github account linked!');
            res.redirect('/connect/accounts');
        });
      }
    );

};
